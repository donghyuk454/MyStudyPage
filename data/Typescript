
<p>
<strong># Windows 설치</strong> <br>
<pre>(npm init)

npm install -g concurrently
npm install -g lite-server
npm install -g typescript

이후 npm 경로 -> 환경 변수 설정

tsc로 compile</pre>
</p>
<p>
<strong># 선택적인 변수</strong> <br>
<pre>기존 자바 스크립트

const name = "donghyuk",
    age = 25,
    gender = "male";

const sayhi = (name, age, gender) => {
    console.log('Hello ' + name + ', you are ' + age + ', you are a ' + gender);
}

sayhi(name, age);
sayhi(name, age, gender);

export{};

문제 없음 but typescript에선 문제 발생!

따라서 선택적으로 사용하게 하기 위해선 '?' 필요

const name = "donghyuk",
    age = 25,
    gender = "male";

const sayhi = (name, age, gender?) => {
    console.log('Hello ' + name + ', you are ' + age + ', you are a ' + gender);
}

sayhi(name, age);
sayhi(name, age, gender);

export{};</pre>
</p>
<p>
<strong># 함수 변수 자료형 설정 + tsc-watch</strong> <br>
<pre>함수의 변수의 자료형 + 리턴값 자료형 설정
const sayhi = (name: string, age: number, gender?: string): void => {
    console.log('Hello ' + name + ', you are ' + age + ', you are a ' + gender);
}

@ tsc-watch 사용법
npm add tsc-watch --dev
package.json의 "start" : "tsc-wathch --onSuccess \"node dist/index.js\""

안되는 경우 => npm add typescript 실행</pre>
</p>
<p>
<strong># Interface 사용</strong> <br>
<pre>Object를 만들 수 잇음 -> Interface를 통해 정의해서 사용!

interface Human {
    name:string;
    age:number;
    gender:string;
}

const person = {
    name: "dong",
    age: 25,
    gender: "male"
}

const sayhi = (person: Human): void => {
    console.log('Hello ' + person.name + ', you are ' + person.age + ', you are a ' + person.gender);
}

sayhi(person);

export{};</pre>
</p>
<p>
<strong># Class 사용법</strong> <br>
<pre>Interface를 사용하지 않고, Class 를 사용할 경우(react 등을 사용할 때)

class Human_ {
    public name: string;
    public age: number;
    public gender: string;
    private secret: string;// class 외부에서 변경 X
    constructor(name: string, age: number, gender: string, secret?: string) {// 생성자
        this.name = name;
        this.age = age;
        this.gender = gender;
        this.secret = secret;
    }
}

const donghyuk = new Human_("donghyuk", 25, "male", "helloworld");

const sayhi = (person: Human): void => {
    console.log('Hello ' + person.name + ', you are ' + person.age + ', you are a ' + person.gender);
}

sayhi(donghyuk);

export{};</pre>
</p>
<p>
<strong># 블록 체인 만들기</strong> <br>
<pre>@ 코드
먼저 npm add crypto-js 실행

import * as CryptoJS from "crypto-js";//해시 함수 생성을 위해

class Block {
    public index: number;
    public hash: string;
    public previousHash: string;
    public data: string;
    public timestamp: number;

    static calculateBlockHash = (
        index:number,
        previousHash:string,
        timestamp:number,
        data:string): string =>
        CryptoJS.SHA256(index + previousHash + timestamp + data).toString();

    constructor(index: number,
        hash: string,
        previousHash: string,
        data: string,
        timestamp: number) {
            this.index = index;
            this.hash = hash;
            this.previousHash = previousHash;
            this.data = data;
            this.timestamp = timestamp;
    };
}

const genesisBlock:Block = new Block(0, "20202020", "", "hi", 123456);

let blockchain: [Block] = [genesisBlock];

console.log(blockchain);

const getBlockchain = () : Block[] => blockchain;

const getLatestBlock = () : Block => blockchain[blockchain.length - 1];

const getNewTimeStamp = () : number => Math.round(new Date().getTime() / 1000);

const createNewBlock = (data:string) : Block => {
    const previousBlock: Block = getLatestBlock();
    const newIndex : number = previousBlock.index + 1;
    const nextTimestamp: number = getNewTimeStamp();
    const newHash: string =
        Block.calculateBlockHash(newIndex, previousBlock.hash, nextTimestamp, data);
    const newBlock : Block =
        new Block(newIndex, newHash, previousBlock.hash, data, nextTimestamp);

    getBlockchain().push(newBlock);

    return newBlock;
};

console.log(createNewBlock("hello"), createNewBlock("byebye"));

export {};</pre>
</p>
