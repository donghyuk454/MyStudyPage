
<p>
<strong># git 명령어 - 버전 만들기</strong> <br>
<pre>1. git 저장소 생성
- git init
2. git 저장 상태 보기
- git status
3. git에 파일 추가/수정
- git add <file>
4. 내 꺼임을 알려주기
- git config --global user.name <username>
- git config --global user.email <email>
5. git 에 commit하기
- git commit
6. log(history) 보기
- git log (-p)
- git dif <commit message id>..<commit message id> -> 각각의 commit 소스코드 사이의 차이점 보여줌
- git diff -> 버전을 바꾸기 전에 버전을 지금 바꿀 시 바뀔 내용을 보여줌
7. git 이전으로 돌아가는 법(공유하기 전)
- git reset <log id> --hard 	-> 이전 버전으로 돌아가는 법, 위험한 방법
- git revert			-> 이전 버전을 새로운 버전으로 만드는 법
8. 수정한 내용들을 commit 하는법
- 원래: git add <> -> git commit
=> git commit -a</pre>
</p>

<p>
<strong># Branch</strong> <br>
<pre>0. branch 쓰는 이유
버전을 client용, dev용 등으로 쪼개서 관리해야 할 경우 사용
1. branch 만들기
- git branch => 기본 branch(master)
- git branch ~~
2. branch 이동
- git checkout ~~
3. git log option
- git log --branches --decorate --graph (--oneline)
- git log (-p) A..B => A에는 없고 B에는 있는 것 볼 수 있음
- git diff A..B => 차이점 비교할 경우
3. branch 병합하는 방법(merge)
- git checkout B
- git merge A
A -> B 로 병합하기
4. 작업 중 상태 감춰놓기, 저장(stash)
- git stash(숨김) -> chectout...작업... -> git stash apply(돌아옴)
- git stash drop (stash 삭제)
- git stash pop (stash apply -> drop)</pre>
</p>