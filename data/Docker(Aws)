
<p>
<strong># Ec2 시작</strong> <br>
<pre>Ec2 생성 -> 새로운 키페어 파일 다운 -> 인스턴스 시작
-> 키페어 파일 보안 설정(파일 속성 -> 보안 -> 고급 -> 명시적 상속 권한 -> Admin과 System만 남기기)
-> 연결!</pre>
</p>
<p>
<strong># Jupyter Notebook 설치 및 실행</strong> <br>
<pre>1. jupyter notebook 설치
sudo apt-get update -> sudo apt-get install python3-pip
-> sudo pip3 install notebook
2. jupyter 접속을 위한 비밀번호 설정 및 접근
python3 ->
from notebook.auth import passwd -> passwd() -> 비밀번호 입력 -> hash값 기록
-> jupyter notebook --generate-config(jupyter 환경 설정파일(값) 만들기)
-> vi 에디터로 해당 환경설정 파일 수정 -> 맨 아래에 아래 코드 입력
-> sudo jupyter-notebook --allow-root ->8888 포트 열어주기(보안그룹 -> 인바운드 규칙)
-> 해당 ip:8888를 web으로 접근
# code
c = get_config()
c.NotebookApp.password = u'sha1:hash값'
c.NotebookApp.ip = '서버 ip'
c.NotebookApp.notebook_dir = '/'
3. 항상 실행되게 만들기
ctrl + z(서버 종료) -> bg(백그라운드에서 돌아가게 함) -> disown -h(소유권 포기)</pre>
</p>
<p>
<strong># HTTPS 적용</strong> <br>
<pre>(0.) notebook 실행 종료
sudo netstat -nap | grep 8888
-> 실행되고있는 서버 확인
sudo kill -9 ~~
1. https로 jupyter notebook 실행
cd /home/ubuntu(home으로 이동) -> ssl 파일 생성 후 cd ssl
-> sudo openssl req -x509 -nodes -days 365 -newkey rsa:1024 -keyout "cert.key" -out "cert.pem"
(rsa 알고리즘을 이용하여 개인키(cert.key)와 공개키(cert.pem) 생성)
-> 환경설정 파일 열기(config) ->
c.NotebookApp.certfile = u'/home/ubuntu/ssl/cert.pem' (공개키)
c.NotebookApp.keyfile = u'/home/ubuntu/ssl/cert.key' (개인키)
-> jupyter notebook 실행
2. jupyter notebook 을 시스템 서비스로서 등록
which jupyter-notebook -> sudo vi /etc/systemd/system/jupyter.service(서비스 파일 작성) ->
[Unit]
Description=Jupyter Notebook Server

[Service]
Type=simple
User=ubuntu
ExecStart=/usr/bin/sudo ~(jupyter-notebook 경로)~ --allow-root --config=~config파일 경로~

[Install]
WantedBy=multi-user.target
-> sudo systemctl daemon-reload -> sudo systemctl enable jupyter
-> sudo systemctl start jupyter(시작) -> sudo systemctl status jupyter(상태 확인) -> sudo systemctl restart jupyter(재시작)</pre>
</p>
<p>
<strong># Docker 설치</strong> <br>
<pre>sudo apt update -> sudo apt install apt-transport-https
-> sudo apt install ca-certificates -> sudo apt install curl
-> sudo apt install software-properties-common
-> curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
-> sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
-> sudo apt update -> apt-cache policy docker-ce -> sudo apt install docker-ce</pre>
</p>
<p>
<strong># Docker 명령어</strong> <br>
<pre>1. 이미지 다운
- docker pull ~~
2. 이미지 확인
- docker images
3. 이미지 삭제
- docker rmi -f ~~
4. 컨테이너 띄우기
- docker run ~~
5. 컨테이너 동작 확인
- docker ps -a
6. 컨테이너 삭제
- docker rm ~~
- docker rm -f `docker ps -a -q`(모든 컨테이너 삭제)
7. 이미지 만들기
- mkdir example -> sudo vi Dockerfile ->
FROM ubuntu:18.04//서버
MAINTAINER donghyuk <donghyuk454@gmail.com>// 누가 작성했는가
//웹서버
RUN apt-get update
RUN apt-get install -y apache2 # Install Apache web server (Only 'yes')

EXPOSE 80 // Open HTTP Port,여기는 주석있으면 안됨

CMD ["apachectl", "-D", "FOREGROUND"]//apache 항상 실행상태로 두기
-> docker build -t ~~~ .  (//image name)
-> docker run -p 80:80  (//host port: container port) ~~(실행)</pre>
</p>

<p>
<strong># PHP 설치 및 실행</strong> <br>
<pre>1. PHP 설치
@Dockerfile 수정(아래 내용 추가)
#Avoiding user interaction with tzdata
ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get install -y software-properties-common
RUN add-apt-repository ppa:ondrej/php # for Installing PHP 5.6
RUN apt-get update
RUN apt-get install -y php5.6

-> docker run -p 80:80 -v /home/ubuntu/example/html:/var/www/html ~

2. php 작성
sudo vi index.php ->
&lt;?php phpinfo();?></pre>
</p>

<p>
<strong># Mysql 설치</strong> <br>
<pre>1. Mysql 설치
docker run -d -p 9876:3306 -e MYSQL_ROOT_PASSWORD=비밀번호 mysql:5.6
2. 실행
docker exec -it ~~ /bin/bash
-> docker inspect ~~ -> ip주소 확인
mysql -u root -p --host ip --port 3306

+) mysql user 생성
create user '~~'@'%' identified by '비밀번호';~~라는 유저 생성
grant all privileges on *.* to '~~'@'%';//해당 유저에게 권한 주기
flush privileges;//권한 적용

+) 주의! DB서버는 컨테이너로 띄워서 사용하지 않는다.
why? DB서버는 도커 컨테이너처럼 변동이 쉽지 않아야 함.</pre>
</p>
<p>
<strong># Mysql 과 PHP 연동</strong> <br>
<pre>1. 도커 이미지 수정
# Connect to Mysql
RUN apt-get install -y php5.6-mysql
2. php 코드 작성
&lt;?php
  $conn = mysqli_connect(
	'{데이터 베이스 IP}',
	'{계정}',
	'{비밀번호}',
	'{데이터 베이스},
	'{포트번호}'
  );
  if(mysqli_connect_errno()){
	echo "Fail to connect to MySQL: ".mysqli_connect_error();
  }
  $sql = "SELECT VERSION()";
  $result = mysqli_query($conn, &sql);
  $row = mysql_fetch_array(&result);
  print_r($row["VERSION()"]);
?>
</pre>
</p>

<p>
<strong># RDS 연동</strong> <br>
<pre>1. 파라미터 그룹 만들기(한글 설정)
mysql 5.6 -> 파라미터 그룹 편집 -> utf-8로 변경(char, collation)

2. RDS 만들기
-> DB 파라미터 그룹으로 만든 것 사용하기 </pre>
</p>